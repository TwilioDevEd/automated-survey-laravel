.chapter(data-title='Automated surveys with Twilio and Laravel')
  .step(data-file='.env.example')
    :markdown
      ## What does the application thing do?

      This [Laravel 5](http://laravel.com/) web application performs
      automated phone surveys using Twilio's voice API and TwiML. In
      addition to that, the application also displays the survey
      results. The majority of the application's routes will be
      accessed by Twilio itself since survey-takers will interact with
      the application through the phone, not through the
      web. Questions in surveys might be voice responses, numeric
      responses or yes-no responses. A limitation in this sample
      application is that it can only perform the first survey stored
      the database. The source for the application [can be found in
      GitHub.](https://github.com/TwilioDevEd/automated-survey-laravel)

      In this tutorial, we'll highlight the code that interacts with
      Twilio and in turn makes the application tick.  [Check out the project
      README on
      GitHub](https://github.com/TwilioDevEd/automated-survey-laravel/blob/master/readme.md)
      to see how to run the code yourself.

      Let's get started! Click the right arrow above to advance to the next code snippet.

      ---

      **See Also:**
      * [TwiML: PHP Quickstart](https://www.twilio.com/docs/quickstart/php/twiml)
      * [Twilio PHP Helper Library](https://twilio-php.readthedocs.org/en/latest/)
      * [TwiML creation with PHP](http://twilio-php.readthedocs.org/en/latest/usage/twiml.html)
      * [Laravel 5 Docs](http://laravel.com/docs/5.1)
      * [Eloquent ORM](http://laravel.com/docs/5.1/eloquent)

  .step(data-file='.env.example', data-highlight='5-6')
    :markdown
      ## Configure the application

      The application requirements are minimal. The only necessary
      component is a running PostgreSQL database. Rename
      `.env.example` to `.env` and configure access to your local
      database.

      Now that the database is configured we can load a
      survey into it.

      ---

      **See Also:** 
      * [Configuring Laravel Applications](http://laravel.com/docs/5.1/installation#configuration)
      * [Your Available Phone Numbers](https://www.twilio.com/user/account/phone-numbers/incoming)

  .step(data-file='app/Console/Commands/LoadSurveys.php',
    data-highlight='38-56')
    :markdown
      ## Create a survey

      In order to perform automated surveys we first need to have some
      questions to ask. For your convenience, the
      application's repository already includes one survey that can be
      loaded into the database using the included `survey:load`
      `artisan` command. Refer to the application's
      [Readme](https://github.com/TwilioDevEd/automated-survey-laravel/blob/master/readme.md)
      for more details on how to fill your database with a sample
      survey. Of course you're free to write your own survey if you so
      desire. The existing `bear_survey.json` file can serve as a template.

      We want users to take our survey, so next we are going implement
      the interaction of the caller with the application.

      ---

      **See Also:** 
      * [Laravel Commands](http://laravel.com/docs/5.0/commands)
      * [Models in Eloquent ORM](http://laravel.com/docs/5.1/eloquent)

  .step(data-file='app/Http/Controllers/SurveyController.php', data-highlight='91-102')
    :markdown
      ## Respond to Twilio's initial request

      Whenever one of [your Twilio phone
      numbers](https://www.twilio.com/user/account/phone-numbers/incoming)
      receives a call, Twilio will make an HTTP request to the voice request
      URL configured under it with the HTTP method specified (either GET
      or POST).

      For this application Twilio should be configured to make a GET request to
      the application's `/first_survey` endpoint. Since our app handles
      one and only one survey, the endpoint will reply with a "303
      Redirect" with the location of the first survey it finds. The
      URL for this survey should look something like `/survey/<some_id>`. [Twilio is a well-behaved HTTP
      client](https://www.twilio.com/docs/api/twiml/your_response) and
      will follow the redirect and thus make another request.

      Next we will handle the request made after the redirect.

      ---

      **See Also:** 
      * [Twilio webhooks](https://www.twilio.com/platform/webhooks)
      * [HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)
      * [HTTP status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)
      * [TwiML Voice: Your Response](https://www.twilio.com/docs/api/twiml/your_response)
      * [Redirects with Laravel](http://laravel.com/docs/5.1/responses#redirects)

  .step(data-file='app/Http/Controllers/SurveyController.php', data-highlight='31-45')
    :markdown
      ## Welcome the caller to the survey

      Now we need to respond to Twilio's request with a
      [TwiML](https://www.twilio.com/docs/api/twiml) document with
      instructions on how to interact with the caller. We use the
      [twilio-php](http://twilio-php.readthedocs.org/en/latest/usage/twiml.html)
      library to generate the necessary TwiML.

      First of all, we want to welcome the caller, thank her
      for taking the survey and then tell her the name of the survey she's
      about to take. After that we redirect the caller to the
      first question so she can start taking the survey. For this we
      will first use TwiML's
      [`<Say>`](https://www.twilio.com/docs/api/twiml/say) verb
      followed by the
      [`<Redirect>`](https://www.twilio.com/docs/api/twiml/redirect)
      verb. The contents of the `<Redirect>` tag should be the URL of the
      survey's first question.

      Now that we have welcomed the user it's time to start asking questions.

      ---

      **See Also:**
      * [Twilio-PHP documentation](http://twilio-php.readthedocs.org/en/latest/)
      * [TwiML Voice: Your Response](https://www.twilio.com/docs/api/twiml/your_response)
      * [TwiML Voice: <Say>](https://www.twilio.com/docs/api/twiml/say)
      * [TwiML Voice: <Redirect>](https://www.twilio.com/docs/api/twiml/redirect)

  .step(data-file='app/Http/Controllers/QuestionController.php')
    :markdown
      ## Ask the caller a question

      At this point the Twilio client has made a request for the first
      question. Once again, we will use the
      [twilio-php](https://www.twilio.com/docs/php/install) library to
      generate a response. First we will ask a question, say
      instructions on how to answer that question and then finally
      record the caller's answer to the question. It's important to
      keep in mind that instructions on how to answer a question depend on the
      type of question we ask. We also need record the answer
      differently if a given question requires keypad input or voice
      input.

      Recording the answer is slightly more involved. If the question
      is of kind "voice" then we use the
      [`<Record>`](https://www.twilio.com/docs/api/twiml/record)
      verb. However, if we expect dialpad input we use the the
      [`<Gather>`](https://www.twilio.com/docs/api/twiml/gather)
      verb. Both verbs take an `action` attribute and a `method`
      attribute. Twilio's client will use both attributes to make a
      request we can use to store the caller's answer to the question.

      Since we want to create a new resource in our server, the HTTP
      method will be `POST` for both `<Gather>` and `<Record>`. The
      `action` URL will be `/question/<question_id>/question_response`
      for both TwiML verbs. We also include a `?Kind=<question kind>`
      URL parameter so we can identify the question kind before we
      store it in the database.

      Now that the caller has answered our question we want to store
      her answer.

      ---

      **See Also:**
      * [TwiML Voice: <Gather>](https://www.twilio.com/docs/api/twiml/gather)
      * [TwiML Voice: <Record>](https://www.twilio.com/docs/api/twiml/record)

  .step(data-file='app/Http/Controllers/QuestionResponseController.php'
    data-highlight='18-36')
    :markdown
      ## Store a question's answer

      Now Twilio has made a POST request to the
      `/question/<question_id>/question_response?Kind=<question
      kind>` URL. The request includes everything we need to record the
      caller's answer to our question. Aside from the `<question_id>`
      parameter, the `Kind` parameter, and the user's response,
      Twilio includes a [wealth of
      information](https://www.twilio.com/docs/api/twiml/twilio_request)
      with every request. For this sample application we will store the
      `RecordingUrl` or `Digits` parameter for voice and
      yes-no/numeric answers accordingly. For this sample we will also
      save the `CallSid` so we can uniquely identify a call.

      Most surveys include more than a single question so we must now
      redirect the user to the next question in this survey.

      ---

      **See Also:**
      [TwiML Voice: Twilio's Request'](https://www.twilio.com/docs/api/twiml/twilio_request)

  .step(data-file='app/Http/Controllers/QuestionResponseController.php'
    data-highlight='30-35')
    :markdown
      ## Redirect the user to the next question

      Now we need to locate the next question. This is rather
      straightfoward since we have the same request as in the previous
      step therefore we have access to the same information. We merely need
      to find the question after the current one and reply with a "303
      See Other" with the next question's URL as the target.

      However, we need to handle the case where there's no next
      question. In this case we simply say "good-bye" and hangup.

      The application's users might want to see the answers to their
      survey so we're implementing that next.

      ---

      **See Also:** 
      * [HTTP status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)
      * [Redirects with Laravel](http://laravel.com/docs/5.1/responses#redirects)
      * [TwiML Voice: <Say>](https://www.twilio.com/docs/api/twiml/say)
      * [TwiML Voice: <Hangup>](https://www.twilio.com/docs/api/twiml/hangup)

  .step(data-file='app/Http/Controllers/SurveyController.php', data-highlight='47-59')
    :markdown
      ## Display the survey results

      For this route we simply query the database through an Eloquent query scope and
      then display the information within a Blade template. We display
      a panel for every individual call. It's worth mentioning we also
      redirect the application's root route to this route.

      ---

      **See Also:**
      * [Eloquent](http://laravel.com/docs/5.1/eloquent)
      * [Eloquent scopes](http://laravel.com/docs/5.1/eloquent#query-scopes)
      * [Blade templates](http://laravel.com/docs/5.1/blade)

  .step
    :markdown
      ## Where to next?

      It's done! If you have configured one of your voice-enable Twilio
      numbers to the application built in this tutorial you should be
      able to take the survey and see the results under root route of
      the application. We hope you found this sample application
      useful.  If you're a PHP developer working with Twilio, you
      might enjoy these other tutorials:

      ### [Click to Call](https://www.twilio.com/docs/howto/walkthrough/click-to-call/php/laravel)  
      Put a button on your web page that connects visitors to live support or sales
      people via telephone.

      ### [Two-Factor Authentication](https://www.twilio.com/docs/howto/walkthrough/two-factor-authentication/php/laravel) 
      Improve the security of Laravel's built-in login functionality by adding
      two-factor authentication via text message.

      ### Did this help?
      As always, we'd love to hear what you thought of this tutorial!
      [Shoot us a note](mailto:devedoss@twilio.com) to let us know what you liked
      and what we can do better. See you next time!
