.chapter(data-title='Automated surveys with Twilio and Laravel')
  .step(data-file='.env.example')
    :markdown
      ## About this application

      This [Laravel 5](http://laravel.com/) sample application demonstrates
      using Twilio and [TwiML](https://www.twilio.com/docs/api/twiml) to deliver a survey that can be completed via voice call.
      The survey actually works via SMS text messages, too, but we're going to
      focus on the looping logic necessary to conduct an interview over the
      phone.

      In this tutorial, we'll highlight the code that interacts with Twilio
      and in turn makes the application tick. To run this sample app yourself,
      [download the code and follow the instructions on
      GitHub](https://github.com/TwilioDevEd/ivr-phone-tree- rails).

      Let's get started! Click the right arrow above to move to the next step
      of the tutorial.

      ---

      **See Also:**
      * [TwiML: PHP Quickstart](https://www.twilio.com/docs/quickstart/php/twiml)
      * [Twilio PHP Helper Library](https://twilio-php.readthedocs.org/en/latest/)
      * [TwiML creation with PHP](http://twilio-php.readthedocs.org/en/latest/usage/twiml.html)
      * [Laravel 5 Docs](http://laravel.com/docs/5.1)
      * [Eloquent ORM](http://laravel.com/docs/5.1/eloquent)

  .step(data-file='.env.example', data-highlight='5-6')
    :markdown
      ## Configure the application

      In order to store the Survey responses will need a PostgreSQL database. Rename
      `.env.example` to `.env` to configure access to your local
      database.

      Now that the database is configured we can load a
      survey into it.

      ---

      **See Also:** 
      * [Configuring Laravel Applications](http://laravel.com/docs/5.1/installation#configuration)
      * [Your Available Phone Numbers](https://www.twilio.com/user/account/phone-numbers/incoming)

  .step(data-file='app/Console/Commands/LoadSurveys.php',
    data-highlight='38-56')
    :markdown
      ## Create a survey

      In order to perform automated surveys we first need to have some
      questions to ask. For your convenience, the application's
      repository already includes one survey that can be loaded into
      the database using the included `survey:load` `artisan`
      command.

      We want users to take our survey, so next we are going implement
      the interaction of the caller with the application.

      ---

      **See Also:** 
      * [Write your own Survey](https://github.com/TwilioDevEd/automated-survey-laravel/blob/master/readme.md)
      * [Laravel Commands](http://laravel.com/docs/5.0/commands)
      * [Models in Eloquent ORM](http://laravel.com/docs/5.1/eloquent)

  .step(data-file='app/Http/Controllers/SurveyController.php', data-highlight='91-102')
    :markdown
      ## Respond to a Phone Call

      Whenever one of [your Twilio phone
      numbers](https://www.twilio.com/user/account/phone-numbers/incoming)
      receives a call, Twilio will make an HTTP request to the voice URL
      configured under it.

      For this application Twilio should be configured to request the
      application's `/first_survey` endpoint. Since our app only handles one
      survey, the endpoint will reply with a redirect to the location of the
      first survey it finds. The URL for this survey should look something
      like `/survey/<some_id>`. [Twilio is a well-behaved HTTP
      client](https://www.twilio.com/docs/api/twiml/your_response) and will
      follow the redirect and thus make another request.

      Next we will handle the request made after the redirect.

      ---

      **See Also:** 
      * [TwiML Voice: Your Response](https://www.twilio.com/docs/api/twiml/your_response)
      * [Redirects with Laravel](http://laravel.com/docs/5.1/responses#redirects)

  .step(data-file='app/Http/Controllers/SurveyController.php', data-highlight='31-45')
    :markdown
      ## Welcome the caller to the survey

      Before we get started with the survey, we want to welcome the user. We will immediately serve up the first question by using the
      [`<Say>`](https://www.twilio.com/docs/api/twiml/say) verb
      followed by the
      [`<Redirect>`](https://www.twilio.com/docs/api/twiml/redirect)
      verb. The contents of the `<Redirect>` tag should be the URL of the
      survey's first question.

      Now that we have welcomed the user it's time to start asking questions.

      ---

      **See Also:**
      * [Twilio-PHP documentation](http://twilio-php.readthedocs.org/en/latest/)
      * [TwiML Voice: Your Response](https://www.twilio.com/docs/api/twiml/your_response)
      * [TwiML Voice: <Say>](https://www.twilio.com/docs/api/twiml/say)
      * [TwiML Voice: <Redirect>](https://www.twilio.com/docs/api/twiml/redirect)

  .step(data-file='app/Http/Controllers/QuestionController.php')
    :markdown
      ## Ask the caller a question

      Asking the question is pretty straightforward, but we also need to record the response. 

      Recording the answer is slightly more involved. If the question
      is of kind "voice" then we use the
      [`<Record>`](https://www.twilio.com/docs/api/twiml/record)
      verb. However, if we expect dialpad input we use the the
      [`<Gather>`](https://www.twilio.com/docs/api/twiml/gather)
      verb. Both verbs take an `action` attribute and a `method`
      attribute. Twilio's client will use both attributes to make a
      request we can use to store the caller's answer to the question.

      The `action` URL will be `/question/<question_id>/question_response`
      for both TwiML verbs. We also include a `?Kind=<question kind>`
      URL parameter so we can identify the question kind before we
      store it in the database.

      Now that the caller has answered our question we want to store
      her answer.

      ---

      **See Also:**
      * [TwiML Voice: <Gather>](https://www.twilio.com/docs/api/twiml/gather)
      * [TwiML Voice: <Record>](https://www.twilio.com/docs/api/twiml/record)

  .step(data-file='app/Http/Controllers/QuestionResponseController.php'
    data-highlight='18-36')
    :markdown
      ## Store a question's answer

      When the caller has finished entering her response, Twilio will make a request to
      this controller including all the [call parameters](https://www.twilio.com/docs/api/twiml/twilio_request) we will need
      . For this sample application we will store the
      `RecordingUrl` or `Digits` parameter for voice and
      yes-no/numeric answers accordingly. For this sample we will also
      save the `CallSid` so we can uniquely identify a call.

      Most surveys include more than a single question so we must now
      redirect the user to the next question in this survey.


  .step(data-file='app/Http/Controllers/QuestionResponseController.php'
    data-highlight='30-35')
    :markdown
      ## Redirect the user to the next question

      Now we need to locate the next question. This is rather
      straightfoward since we have the same request as in the previous
      step therefore we have access to the same information. We merely need
      to find the question after the current one and reply with a
      redirect with the next question's URL as the target.

      However, we need to handle the case where there's no next
      question. In this case we simply say "good-bye" and hangup.

      The application's users might want to see the answers to their
      survey so we're implementing that next.

      ---

      **See Also:** 
      * [HTTP status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)
      * [Redirects with Laravel](http://laravel.com/docs/5.1/responses#redirects)
      * [TwiML Voice: <Say>](https://www.twilio.com/docs/api/twiml/say)
      * [TwiML Voice: <Hangup>](https://www.twilio.com/docs/api/twiml/hangup)

  .step(data-file='app/Http/Controllers/SurveyController.php', data-highlight='47-59')
    :markdown
      ## Display the survey results

      For this route we simply query the database through an Eloquent query scope and
      then display the information within a Blade template. We display
      a panel for every individual call. It's worth mentioning we also
      redirect the application's root route to this route.

      ---

      **See Also:**
      * [Eloquent](http://laravel.com/docs/5.1/eloquent)
      * [Eloquent scopes](http://laravel.com/docs/5.1/eloquent#query-scopes)
      * [Blade templates](http://laravel.com/docs/5.1/blade)

  .step
    :markdown
      ## Where to next?

      It's done! If you have configured one of your voice-enable Twilio
      numbers to the application built in this tutorial you should be
      able to take the survey and see the results under root route of
      the application. We hope you found this sample application
      useful.  If you're a PHP developer working with Twilio, you
      might enjoy these other tutorials:

      [**Click to Call**](https://www.twilio.com/docs/howto/walkthrough/click-to-call/php/laravel)  
      Put a button on your web page that connects visitors to live support or sales
      people via telephone.

      [**Two-Factor Authentication**](https://www.twilio.com/docs/howto/walkthrough/two-factor-authentication/php/laravel) 
      Improve the security of Laravel's built-in login functionality by adding
      two-factor authentication via text message.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.
